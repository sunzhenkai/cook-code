/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef User_TYPES_H
#define User_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace demos { namespace user {

class User;

class UserServiceRequest;

class UserServiceResponse;


class User : public virtual ::apache::thrift::TBase {
 public:

  User(const User&);
  User& operator=(const User&);
  User() : id(), name() {
  }

  virtual ~User() throw();
  std::string id;
  std::string name;

  void __set_id(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const User & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

std::ostream& operator<<(std::ostream& out, const User& obj);


class UserServiceRequest : public virtual ::apache::thrift::TBase {
 public:

  UserServiceRequest(const UserServiceRequest&);
  UserServiceRequest& operator=(const UserServiceRequest&);
  UserServiceRequest() : reqTs(0) {
  }

  virtual ~UserServiceRequest() throw();
  int64_t reqTs;
  User user;

  void __set_reqTs(const int64_t val);

  void __set_user(const User& val);

  bool operator == (const UserServiceRequest & rhs) const
  {
    if (!(reqTs == rhs.reqTs))
      return false;
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const UserServiceRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserServiceRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserServiceRequest &a, UserServiceRequest &b);

std::ostream& operator<<(std::ostream& out, const UserServiceRequest& obj);


class UserServiceResponse : public virtual ::apache::thrift::TBase {
 public:

  UserServiceResponse(const UserServiceResponse&);
  UserServiceResponse& operator=(const UserServiceResponse&);
  UserServiceResponse() : isOk(0) {
  }

  virtual ~UserServiceResponse() throw();
  bool isOk;
  User user;

  void __set_isOk(const bool val);

  void __set_user(const User& val);

  bool operator == (const UserServiceResponse & rhs) const
  {
    if (!(isOk == rhs.isOk))
      return false;
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const UserServiceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserServiceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserServiceResponse &a, UserServiceResponse &b);

std::ostream& operator<<(std::ostream& out, const UserServiceResponse& obj);

}} // namespace

#endif
