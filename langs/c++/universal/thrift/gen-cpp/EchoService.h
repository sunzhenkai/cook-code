/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EchoService_H
#define EchoService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "echo_types.h"

namespace example {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EchoServiceIf {
 public:
  virtual ~EchoServiceIf() {}
  virtual void Echo(EchoResponse& _return, const EchoRequest& request) = 0;
};

class EchoServiceIfFactory {
 public:
  typedef EchoServiceIf Handler;

  virtual ~EchoServiceIfFactory() {}

  virtual EchoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EchoServiceIf* /* handler */) = 0;
};

class EchoServiceIfSingletonFactory : virtual public EchoServiceIfFactory {
 public:
  EchoServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<EchoServiceIf>& iface) : iface_(iface) {}
  virtual ~EchoServiceIfSingletonFactory() {}

  virtual EchoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EchoServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<EchoServiceIf> iface_;
};

class EchoServiceNull : virtual public EchoServiceIf {
 public:
  virtual ~EchoServiceNull() {}
  void Echo(EchoResponse& /* _return */, const EchoRequest& /* request */) {
    return;
  }
};

typedef struct _EchoService_Echo_args__isset {
  _EchoService_Echo_args__isset() : request(false) {}
  bool request :1;
} _EchoService_Echo_args__isset;

class EchoService_Echo_args {
 public:

  EchoService_Echo_args(const EchoService_Echo_args&);
  EchoService_Echo_args& operator=(const EchoService_Echo_args&);
  EchoService_Echo_args() {
  }

  virtual ~EchoService_Echo_args() throw();
  EchoRequest request;

  _EchoService_Echo_args__isset __isset;

  void __set_request(const EchoRequest& val);

  bool operator == (const EchoService_Echo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const EchoService_Echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoService_Echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EchoService_Echo_pargs {
 public:


  virtual ~EchoService_Echo_pargs() throw();
  const EchoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EchoService_Echo_result__isset {
  _EchoService_Echo_result__isset() : success(false) {}
  bool success :1;
} _EchoService_Echo_result__isset;

class EchoService_Echo_result {
 public:

  EchoService_Echo_result(const EchoService_Echo_result&);
  EchoService_Echo_result& operator=(const EchoService_Echo_result&);
  EchoService_Echo_result() {
  }

  virtual ~EchoService_Echo_result() throw();
  EchoResponse success;

  _EchoService_Echo_result__isset __isset;

  void __set_success(const EchoResponse& val);

  bool operator == (const EchoService_Echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EchoService_Echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoService_Echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EchoService_Echo_presult__isset {
  _EchoService_Echo_presult__isset() : success(false) {}
  bool success :1;
} _EchoService_Echo_presult__isset;

class EchoService_Echo_presult {
 public:


  virtual ~EchoService_Echo_presult() throw();
  EchoResponse* success;

  _EchoService_Echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EchoServiceClient : virtual public EchoServiceIf {
 public:
  EchoServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EchoServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Echo(EchoResponse& _return, const EchoRequest& request);
  void send_Echo(const EchoRequest& request);
  void recv_Echo(EchoResponse& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EchoServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<EchoServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EchoServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EchoServiceProcessor(::apache::thrift::stdcxx::shared_ptr<EchoServiceIf> iface) :
    iface_(iface) {
    processMap_["Echo"] = &EchoServiceProcessor::process_Echo;
  }

  virtual ~EchoServiceProcessor() {}
};

class EchoServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EchoServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< EchoServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< EchoServiceIfFactory > handlerFactory_;
};

class EchoServiceMultiface : virtual public EchoServiceIf {
 public:
  EchoServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<EchoServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EchoServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<EchoServiceIf> > ifaces_;
  EchoServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<EchoServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Echo(EchoResponse& _return, const EchoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Echo(_return, request);
    }
    ifaces_[i]->Echo(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EchoServiceConcurrentClient : virtual public EchoServiceIf {
 public:
  EchoServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EchoServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Echo(EchoResponse& _return, const EchoRequest& request);
  int32_t send_Echo(const EchoRequest& request);
  void recv_Echo(EchoResponse& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
